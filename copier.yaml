_exclude:
  - "*"
  - "!*/"
  - ".git"
  - "/tests"

_message_before_copy: |

  ðŸš€ Welcome to Django Core Template!

  This template helps you quickly create a modern Django project with:
  â€¢ Pre-configured application architecture
  â€¢ Choice of API framework (Django Ninja or DRF)
  â€¢ Database setup (PostgreSQL or MySQL)
  â€¢ Ready-to-use Docker configuration
  â€¢ Development tools (ruff, pre-commit hooks)

  Answer a few questions and we'll create a development-ready project for you!

project_name:
  type: str
  help: "Project name"
  default: "Django Core Project"

project_slug:
  type: str
  default: "{{ project_name | lower | replace(' ', '_') }}"

project_version:
  type: str
  help: "Project version"
  default: "{{ project_version | default('0.1.0') }}"

project_description:
  type: str
  help: "Project description"
  default: "This is a basic description of the project '{{ project_name }}'"

python_version:
  type: str
  help: "Python version"
  default: "{{ python_version | default('3.12.11') }}"

author_name:
  type: str
  help: "Author name for the project"
  default: "{{ author_name | default('default_author') }}"

author_email:
  type: str
  help: "Author email for the project"
  default: "{{ author_email | default('author@email.com') }}"

api:
  type: str
  help: "API framework"
  choices:
    - ninja
    - drf
  default: "{{ api | default('ninja') }}"

db_type:
  type: str
  help: "Database type"
  choices:
    - postgresql
    - mysql
  default: "{{ db_type | default('postgresql') }}"

db_name:
  type: str
  help: "Database name"
  default: "{{ project_slug }}_db"

db_user:
  type: str
  help: "Database user (author's email address is used by default)"
  default: "{{ author_email }}"

db_password:
  type: str
  secret: true
  help: "Database password (automatically generated in .env by default)"
  default: "{% from 'secrets.jinja' import generate_password %}{{ generate_password(12) }}"

admin_login:
  type: str
  help: "Django admin panel login (author's email address is used by default)"
  default: "{{ author_email }}"

admin_email:
  type: str
  help: "Django admin panel email (author's email address is used by default)"
  default: "{{ author_email }}"

admin_password:
  secret: true
  help: "Django admin panel password (automatically generated in .env by default)"
  default: "{% from 'secrets.jinja' import generate_password %}{{ generate_password(12) }}"

docker_django_port:
  type: str
  help: "Django application port"
  default: "8000"

secret_key:
  secret: true
  help: "Django secret key (automatically generated in .env by default)"
  default: "{% from 'secrets.jinja' import generate_secret_key %}{{ generate_secret_key() }}"

_message_after_copy: |

    ðŸŽ‰ Your project "{{ project_name }}" has been created successfully!

    Next steps:
    1. Navigate to your project: cd {{ project_slug }}
    2. Start development containers: make up
    3. Apply migrations: make migrate
    4. Create superuser: make admin
    5. Open http://localhost:{{ docker_django_port }} in your browser

    Happy coding! ðŸš€

_tasks:
  - command: "mv .env.example .env"
    when: "{{ _copier_operation == 'copy' }}"
    working_directory: "{{ project_slug }}"

  - command: "git init && git add ."
    when: "{{ _copier_operation == 'copy' }}"
    working_directory: "{{ project_slug }}"

  - command: "uv sync --all-extras"
    when: "{{ _copier_operation == 'copy' }}"
    working_directory: "{{ project_slug }}"

  - command: "uv run pre-commit install --install-hooks"
    when: "{{ _copier_operation == 'copy' }}"
    working_directory: "{{ project_slug }}"

  - command: "uv run pre-commit autoupdate"
    when: "{{ _copier_operation == 'copy' }}"
    working_directory: "{{ project_slug }}"

  - command: "uv run pre-commit run --all-files --show-diff-on-failure"
    when: "{{ _copier_operation == 'copy' }}"
    working_directory: "{{ project_slug }}"

  - command: "git commit -m 'feat: initial project setup
    - {{ api|title }} API framework
    - {{ db_type|title }} database
    - Pre-commit hooks configured'"
    when: "{{ _copier_operation == 'copy' }}"
    working_directory: "{{ project_slug }}"
