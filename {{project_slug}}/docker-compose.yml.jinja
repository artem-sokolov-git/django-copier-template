services:

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: {{project_slug}}_web
    volumes:
      - .:/app
    ports:
      - ${DOCKER_DJANGO_PORT:-8000}:8000
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - network
    depends_on:
      {%- if database_type == "postgresql" %}
      postgresql:
        condition: service_healthy
      {%- else %}
      mysql:
        condition: service_healthy
      {%- endif %}

  {%- if database_type == "postgresql" %}
  postgresql:
    image: postgres:17.5
    container_name: {{project_slug}}_postgresql
    volumes:
      - data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgresql_db}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-postgresql_db}"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks:
      - network
  {%- else %}

  mysql:
    image: mysql:9.4.0
    container_name: {{project_slug}}_mysql
    volumes:
      - data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE:-mysql_database}
      MYSQL_USER: ${MYSQL_USER:-admin}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-admin123}
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks:
      - network
  {%- endif %}

volumes:
  data:

networks:
  network:
    driver: bridge
