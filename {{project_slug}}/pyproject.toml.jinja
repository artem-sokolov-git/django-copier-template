# =============================================================================
# PROJECT CONFIGURATION
# =============================================================================

[project]
name = "{{ project_slug }}"
version = "{{ project_version }}"
description = "{{ project_description }}"
readme = "README.md"
requires-python = ">={{ python_version }}"
license = { file = "LICENSE" }
authors = [{ name = "{{ author_name }}", email = "{{ author_email }}" }]
dependencies = [
    "django>=5.2.4",
    "django-environ>=0.12.0",
    {%- if api == "drf" %}
    "djangorestframework>=3.16.0",
    "drf-spectacular>=0.27.2",
    {%- elif api == "ninja" %}
    "django-ninja>=1.4.3",
    {%- endif %}
    {%- if db_type == "postgresql" %}
    "psycopg2-binary>=2.9.10",
    {%- elif db_type == "mysql" %}
    "mysqlclient>=2.2.7",
    {%- endif %}
]

[project.optional-dependencies]
dev = [
    "pre-commit>=4.2.0",
    "mypy>=1.16.1",
    "django-stubs>=5.1.0",
    {%- if api == "drf" %}
    "djangorestframework-stubs>=3.16.0",
    {%- endif %}
    "pytest>=8.4.1",
    "pytest-django>=4.11.1",
    "ruff>=0.12.0",
    "requests>=2.32.5",
]

# =============================================================================
# LINTING CONFIGURATION
# =============================================================================

[tool.ruff]
target-version = "py{{ python_version.split('.')[0] + python_version.split('.')[1] }}"
line-length = 92

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
]
ignore = [
    "S101", # Use of assert detected
    "S601", # shell=True detected
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"*/migrations/*" = ["E501"]
# Django settings use star imports and dynamic attributes by convention
"core/project/settings/*" = ["F405", "F403"]

# =============================================================================
# MYPY CONFIGURATION
# =============================================================================
# Strict mode configuration based on https://habr.com/ru/articles/465007/

[tool.mypy]
python_version = "{{ python_version.split('.')[0] }}.{{ python_version.split('.')[1] }}"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
ignore_errors = false
ignore_missing_imports = true
no_implicit_reexport = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_no_return = true
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = "core.*"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "django.*"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "manage"
ignore_errors = true

[[tool.mypy.overrides]]
# Django settings use dynamic imports and environment-based configuration
module = "core.project.settings.*"
disable_error_code = ["has-type", "misc", "var-annotated"]

[tool.django-stubs]
django_settings_module = "core.project.settings"

# =============================================================================
# PYTEST CONFIGURATION
# =============================================================================

[tool.pytest.ini_options]
testpaths = ["**/tests"]
python_files = ["test_*.py", "test_*.py.jinja"]
DJANGO_SETTINGS_MODULE = "core.project.settings"
