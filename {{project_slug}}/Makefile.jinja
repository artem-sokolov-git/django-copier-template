include .env
export

DC = docker compose
MANAGE = python manage.py

# Colors
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
RED = \033[0;31m
NC = \033[0m

# =============================================================================
# PRE-BUILD PIPELINE
# =============================================================================

.PHONY: git_init
git_init: ## Initialize git repository
	@echo "$(YELLOW)Initializing git repository...$(NC)"
	@git init
	@echo "$(GREEN)Git repository initialized!$(NC)"

.PHONY: uv_sync
uv_sync: ## Sync virtual environment with all extras
	@echo "$(YELLOW)Syncing virtual environment...$(NC)"
	@uv sync --all-extras
	@echo "$(GREEN)Virtual environment synced!$(NC)"

.PHONY: requirements_freeze
requirements_freeze: ## Freeze requirements to requirements.txt
	@echo "$(YELLOW)Freezing requirements...$(NC)"
	@uv export --frozen --output-file=requirements.txt
	@echo "$(GREEN)Requirements frozen!$(NC)"

.PHONY: install_pre_commit
install_pre_commit: ## Install pre-commit hooks
	@echo "$(YELLOW)Installing pre-commit hooks...$(NC)"
	@uv run pre-commit install --install-hooks
	@echo "$(GREEN)Pre-commit hooks installed!$(NC)"

.PHONY: autoupdate_pre_commit
autoupdate_pre_commit: ## Autoupdate pre-commit hooks
	@echo "$(YELLOW)Autoupdating pre-commit hooks...$(NC)"
	@uv run pre-commit autoupdate
	@echo "$(GREEN)Pre-commit hooks autoupdated!$(NC)"

.PHONY: git_add_all
git_add_all: ## Add all files to git
	@echo "$(YELLOW)Adding files to git...$(NC)"
	@git add .
	@echo "$(GREEN)Files added to git!$(NC)"

.PHONY: pre_build
pre_build: git_init uv_sync requirements_freeze install_pre_commit autoupdate_pre_commit git_add_all

# =============================================================================
# MAIN COMMANDS
# =============================================================================

.PHONY: up
up: ## Start containers
	@echo "$(YELLOW)Starting containers...$(NC)"
	@$(DC) up -d --build
	@echo "$(GREEN)Containers started!$(NC)"

.PHONY: down
down: ## Stop containers
	@echo "$(YELLOW)Stopping containers...$(NC)"
	@$(DC) down
	@echo "$(GREEN)Containers stopped!$(NC)"

.PHONY: clean_volumes
clean_volumes: ## Clean volumes and orphans
	@echo "$(RED)Cleaning volumes...$(NC)"
	@$(DC) down -v --remove-orphans
	@echo "$(GREEN)Volumes cleaned!$(NC)"

.PHONY: reset
reset: ## Restart containers (down + up)
	@echo "$(YELLOW)Restarting containers...$(NC)"
	@$(MAKE) down
	@$(MAKE) up
	@echo "$(GREEN)Containers restarted!$(NC)"

# =============================================================================
# DATABASE
# =============================================================================

.PHONY: migrate
migrate: ## Apply Django migrations
	@echo "$(YELLOW)Applying migrations...$(NC)"
	@$(DC) exec web $(MANAGE) migrate
	@echo "$(GREEN)Migrations applied!$(NC)"

.PHONY: migrations
migrations: ## Create new Django migrations
	@echo "$(YELLOW)Creating migrations...$(NC)"
	@$(DC) exec web $(MANAGE) makemigrations
	@echo "$(GREEN)Migrations created!$(NC)"

# =============================================================================
# DJANGO CUSTOM COMMANDS
# =============================================================================

{%- if custom_auth %}
.PHONY: users
users: ## Create user from users.json
	@echo "$(YELLOW)Creating users...$(NC)"
	@$(DC) exec web $(MANAGE) create_users
{%- else %}
.PHONY: superuser
superuser: ## Create superuser interactively
	@echo "$(YELLOW)Creating superuser... (enter password)$(NC)"
	@$(DC) exec web $(MANAGE) createsuperuser --username {{ author_slug }} --email {{ author_email }}
{%- endif %}

.PHONY: %_app
%_app: ## Create new Django app (make myapp_app)
	@echo "$(YELLOW)Creating app: $*$(NC)"
	@$(DC) exec web $(MANAGE) create_app $*

# =============================================================================
# BUILD
# =============================================================================

.PHONY: build
build: ## Full build (up + migrations + migrate + admin)
	@echo "$(BLUE)Full project build...$(NC)"
	@$(MAKE) up
	@$(MAKE) migrations
	@$(MAKE) migrate
	{%- if custom_auth %}
	@$(MAKE) users
	{%- else %}
	@$(MAKE) superuser
	{%- endif %}

.PHONY: rebuild
rebuild: ## Rebuild with volume cleanup
	@echo "$(BLUE)Rebuilding with cleanup...$(NC)"
	@$(MAKE) clean_volumes
	@$(MAKE) build

# =============================================================================
# TOOLS
# =============================================================================

.PHONY: logs
logs: ## Show container logs (follow mode)
	@$(DC) logs -f

.PHONY: dj_shell
dj_shell: ## Run Django shell
	@$(DC) exec web $(MANAGE) shell

.PHONY: db_shell
db_shell: ## Connect to PostgreSQL shell
	{%- if db_type == "postgresql" %}
	$(DC) exec postgresql psql -U $$POSTGRES_USER -d $$POSTGRES_DB
	{%- elif db_type == "mysql" %}
	$(DC) exec mysql mysql -u $$MYSQL_USER -p$$MYSQL_PASSWORD $$MYSQL_DATABASE
	{%- endif %}

.PHONY: check
check: ## Check code without fixing issues
	@echo "$(YELLOW)Checking code...$(NC)"
	@uv run pre-commit run --all-files --show-diff-on-failure
	@echo "$(GREEN)Code check completed!$(NC)"

.PHONY: clean
clean: ## Clean unused Docker resources
	@echo "$(RED)Cleaning Docker...$(NC)"
	@docker system prune -f
	@echo "$(GREEN)Docker cleaned!$(NC)"

# =============================================================================
# AUTO-GENERATED HELP
# =============================================================================

.PHONY: help
help: ## Show this help menu
	@echo ""
	@echo "$(BLUE){{ project_name }}$(NC)"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""

# =============================================================================
# DEFAULT
# =============================================================================
.DEFAULT_GOAL := help
